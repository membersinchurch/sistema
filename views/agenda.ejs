<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <title>Agenda de Eventos</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css' rel='stylesheet' />
  <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>
  <script src="https://cdn.tailwindcss.com"></script>

<!-- Botão Voltar para Dashboard - Topo da Página -->
<div class="voltar-container">
  <a href="/dashboard" class="btn-voltar">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
    </svg>
    Voltar
  </a>
</div>

<style>
  .voltar-container {
    margin: 20px 0;
    padding: 0 15px;
  }
  
  .btn-voltar {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background-color: #6c757d;
    color: white !important;
    border: none;
    border-radius: 5px;
    text-decoration: none;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 14px;
    transition: all 0.3s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  
  .btn-voltar:hover {
    background-color: #5a6268;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
  }
  
  .btn-voltar svg {
    margin-right: 5px;
  }
</style>

  <style>
    #calendar {
      max-width: 900px;
      margin: 40px auto;
      background: white;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgb(0 0 0 / 0.1);
    }

    /* ===== RESPONSIVIDADE DOS BOTOES NO TOPO (CELULAR) ===== */
    @media (max-width: 640px) {
      /* Container dos botões */
      .fc-toolbar-chunk {
        display: flex !important;
        flex-direction: column !important;
        align-items: center;
        gap: 8px;
        margin-bottom: 8px;
      }

      /* Botões do FullCalendar com largura total */
      .fc-toolbar-chunk > .fc-button {
        width: 100% !important;
        box-sizing: border-box;
      }

      /* Centraliza e espaça título do calendário */
      .fc-toolbar-title {
        font-size: 1.25rem;
        margin-bottom: 8px;
        text-align: center;
      }
    }
  </style>
</head>
<body class="bg-gray-100">

  <div id="calendar"></div>

  <!-- Alerta de sucesso -->
  <div id="alertaSucesso" class="fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg hidden z-50">
    Evento atualizado com sucesso!
  </div>

  <!-- Modal de Novo/Editar Evento -->
  <div id="eventModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg w-full max-w-md space-y-4">
      <h2 id="modalTitle" class="text-xl font-bold text-center">Novo Evento</h2>
      <form id="eventForm">
        <input type="hidden" id="eventId" name="id">
        <input type="hidden" id="data_inicio" name="data_inicio">
        <div>
          <label class="block text-sm font-medium">Título</label>
          <input type="text" name="titulo" required class="w-full p-2 border rounded">
        </div>
        <div>
          <label class="block text-sm font-medium">Data Fim</label>
          <input type="date" name="data_fim" class="w-full p-2 border rounded">
        </div>
        <div>
          <label class="block text-sm font-medium">Descrição</label>
          <textarea name="descricao" rows="2" class="w-full p-2 border rounded"></textarea>
        </div>
        <div>
          <label class="block text-sm font-medium">Local</label>
          <input type="text" name="local" class="w-full p-2 border rounded">
        </div>
        <div class="flex justify-between mt-4">
          <button type="button" onclick="fecharModal()" class="px-4 py-2 bg-gray-400 text-white rounded">Cancelar</button>
          <div class="flex gap-2">
            <button type="button" id="deleteButton" class="hidden px-4 py-2 bg-red-600 text-white rounded">Excluir</button>
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Salvar</button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <script>
    let calendar;

    document.addEventListener('DOMContentLoaded', function () {
      const calendarEl = document.getElementById('calendar');

      calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        locale: 'pt-br',
        selectable: true,
        headerToolbar: {
          left: 'prev,next today',
          center: 'title',
          right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
        },
        events: '/api/eventos',

        dateClick: function (info) {
          // Mostra o modal com a data preenchida
          document.getElementById('data_inicio').value = info.dateStr;
          abrirModal();
        },

        eventClick: function (info) {
          const { id, title, extendedProps, start, end } = info.event;

          document.getElementById("modalTitle").textContent = "Editar Evento";
          document.getElementById("eventId").value = id;
          document.getElementById("data_inicio").value = start.toISOString().split("T")[0];
          document.querySelector("input[name='titulo']").value = title;
          document.querySelector("input[name='data_fim']").value = end ? end.toISOString().split("T")[0] : '';
          document.querySelector("textarea[name='descricao']").value = extendedProps.descricao || '';
          document.querySelector("input[name='local']").value = extendedProps.local || '';

          document.getElementById("deleteButton").classList.remove("hidden");

          abrirModal();
        }
      });

      calendar.render();
    });

    document.getElementById("deleteButton").addEventListener("click", async () => {
      const id = document.getElementById("eventId").value;
      if (!id) return;

      const confirmar = confirm("Tem certeza que deseja excluir este evento?");
      if (!confirmar) return;

      const res = await fetch(`/eventos/${id}`, { method: "DELETE" });

      if (res.ok) {
        fecharModal();
        calendar.refetchEvents();

        // Mostra o alerta de sucesso
        const alerta = document.getElementById('alertaSucesso');
        alerta.classList.remove('hidden');

        setTimeout(() => {
          alerta.classList.add('hidden');
        }, 3000);

      } else {
        alert("Erro ao salvar evento.");
      }
    });

    function abrirModal() {
      document.getElementById('eventModal').classList.remove('hidden');
    }

    function fecharModal() {
      document.getElementById('eventForm').reset();
      document.getElementById('eventModal').classList.add('hidden');
    }

    // Envia novo evento via POST
    document.getElementById('eventForm').addEventListener('submit', async function (e) {
      e.preventDefault();

      const formData = new FormData(e.target);
      const evento = {};
      formData.forEach((v, k) => evento[k] = v);

      const metodo = evento.id ? 'PUT' : 'POST';
      const url = evento.id ? `/eventos/${evento.id}` : '/eventos';

      const res = await fetch(url, {
        method: metodo,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(evento)
      });

      if (res.ok) {
        fecharModal();
        calendar.refetchEvents();

        // Exibe alerta de sucesso na edição/inserção
        const alerta = document.getElementById('alertaSucesso');
        alerta.textContent = evento.id ? "Evento atualizado com sucesso!" : "Evento criado com sucesso!";
        alerta.classList.remove('hidden');
        setTimeout(() => alerta.classList.add('hidden'), 3000);

      } else {
        alert("Erro ao salvar evento.");
      }
    });
  </script>

</body>
</html>
